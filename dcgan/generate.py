"""Saves a grid of images generated by a pretrained DCGAN's generator.

Author: Ryan Strauss
"""
import click
import os
import tensorflow as tf

import networks


def float_image_to_uint8(image):
    """Converts an image in the range [-1, 1] to an image in the range [0, 255].

    Args:
        image: A `Tensor` representing an image in the range [-1, 1].

    Returns:
        A uint8 `Tensor` representing an image..
    """
    image = (image * 127.5) + 127.5
    return tf.cast(image, tf.uint8)


@click.command()
@click.argument('checkpoint_dir', type=click.Path(file_okay=False, dir_okay=True, exists=True), nargs=1)
@click.option('--grid_size', type=click.INT, default=10, nargs=1,
              help='Number of rows/cols in the generated image grid.')
@click.option('--latent_dim', type=click.INT, default=64, nargs=1, help='Dimension of the generator\'s input space.')
@click.option('--output_name', type=click.STRING, default=None, nargs=1,
              help='Optionally specify the name of the saved image. Should end with ".png".')
def main(checkpoint_dir, grid_size, latent_dim, output_name):
    """Generates images from a pretrained DCGAN."""
    if grid_size > 20:
        raise ValueError('To prevent the saved image from getting too large, the grid size cannot be more than 20. '
                         'To save more than 400 images, run this script multiple times with different output names.')

    num_images = grid_size ** 2

    if output_name is None:
        output_name = 'generated_images_{}.png'.format(num_images)
    assert output_name.endswith('.png'), 'Saved file must have a PNG extension.'

    # Get checkpoint path
    checkpoint_path = tf.train.latest_checkpoint(checkpoint_dir)

    if checkpoint_path is None:
        print('No checkpoint could be found. Exiting.')
        exit(0)

    # Generate new images
    with tf.variable_scope('Generator'):
        images = networks.generator(tf.random_normal([num_images, latent_dim]), is_training=False)

    # Tile them in a single image
    reshaped_images = tf.contrib.gan.eval.image_reshaper(images, num_cols=grid_size)
    uint8_images = float_image_to_uint8(reshaped_images)
    image_write_ops = tf.write_file(
        os.path.join(checkpoint_dir, 'eval', output_name),
        tf.image.encode_png(uint8_images[0]))

    # Restore checkpoint and run ops
    session_creator = tf.train.ChiefSessionCreator(checkpoint_filename_with_path=checkpoint_path)
    with tf.train.MonitoredSession(session_creator=session_creator) as sess:
        sess.run(image_write_ops)


if __name__ == '__main__':
    main()
